#include <behaviors.dtsi>
#include "keycodes.h"

#define TOP_ROW KC_Q   KC_W   KC_E   KC_R   KC_T      KC_Y   KC_U   KC_I   KC_O   KC_P    
#define MID_ROW GUI_A  ALT_S  CTRL_D SHFT_F KC_G      KC_H   SHFT_J CTRL_K ALT_L  GUI_SEMI
#define BOT_ROW KC_Z   KC_X   KC_C   KC_V   KC_B      KC_N   KC_M   &comma &dot   KC_FSLH 
#define THUMB_ROW           KC_BSPC NAV KC_SPACE      KC_RET SYM_TAB KC_ESC

&caps_word {
  continue-list = <UNDERSCORE MINUS>;
};

/ {
  behaviors {
    hm: homerow_mods {
      compatible = "zmk,behavior-hold-tap";
      label = "HOMEROW_MODS";
      #binding-cells = <2>;
      tapping-term-ms = <150>;
      quick-tap-ms = <0>;
      flavor = "tap-preferred";
      bindings = <&kp>, <&kp>;
    };
  };
    
  conditional_layers {
    compatible = "zmk,conditional-layers";
    tri_layer {
      if-layers = <_NAV _SYMBOL>;
      then-layer = <_ADJUST>;
    };
  };

  dot: dot {
    compatible = "zmk,behavior-mod-morph";
    label = "DOT";
    #binding-cells = <0>;
    bindings = <KC_DOT>, <XXXX>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
  };

  comma: comma {
    compatible = "zmk,behavior-mod-morph";
    label = "COMMA";
    #binding-cells = <0>;
    bindings = <KC_COMMA>, <XXXX>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
  };
  
  macros {
    ZMK_MACRO(farr,
      wait-ms = <10>;
      bindings = <KC_EQUAL KC_GT>;
    )
    ZMK_MACRO(tarr,
      wait-ms = <10>;
      bindings = <KC_MINUS KC_GT>;
    )
    ZMK_MACRO(devtools,
      wait-ms = <10>;
      bindings
          = <&macro_press KC_LGUI>
          , <&macro_press KC_LSHFT>
          , <&macro_tap KC_I>
          , <&macro_release KC_LSHFT>
          , <&macro_release KC_LGUI>;
    )
  };  
};
